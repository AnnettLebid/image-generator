/* eslint-disable @typescript-eslint/no-unused-vars */
import { useState, useEffect, useRef, useCallback, createRef } from "react";
import axios from "axios";
import { Loader, Card, FormField } from "../components";
import BlurImage from "../components/BlurImage";
import usePosts from "../hooks/usePosts";
import { set } from "react-hook-form";
import { getPosts } from "../utils";

interface Post {
  _id: string;
  name: string;
  prompt: string;
  photoUrl: string;
}

const BASE_URL = "http://localhost:8080/api/v1/posts";

const limit = 10;

export const Home = () => {
  const [posts, setPosts] = useState<Post[]>([]);
  const [isError, setIsError] = useState("");
  const [page, setPage] = useState(1);
  const nextPageRef = useRef<boolean>(null);

  const nextPage = () => {
    setPage((prevPage) => prevPage + 1);
  };

  useEffect(() => {
    console.log("mounted, getting posts");
    getPosts(`${BASE_URL}`, page).then(({ posts, isNextPage }) => {
      setPosts((prevPosts) => [...prevPosts, ...posts]);
      nextPageRef.current = isNextPage;
    });
  }, [page]);

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">
          The community showcase
        </h1>
        <p className="mt-2 text-[#666e75] text-[16px] max-w-[500px]">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>
      <div className="mt-16">{/* <FormField /> */}</div>
      <div className="mt-10">
        {isError ? <div>Oh, no.{isError}</div> : null}
        <>
          {/* {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing results for
                <span className="text-[#222328]">{searchText}</span>
              </h2>
            )} */}
          <div>
            {/* {searchText ? (
                <RenderCards data={allPosts} title="No search results found" />
              ) : (
                <> */}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {posts.map((post, index) => {
                return (
                  <Card
                    key={post._id}
                    {...post}
                    isLast={index === posts.length - 1}
                    nextPage={nextPageRef.current ? nextPage : null}
                  />
                );
              })}

              {/* {isLoading && (
                <div>
                  {Array.from({ length: limit }, (_, index) => index).map(
                    (n) => {
                      return (
                        <div
                          key={n}
                          className="w-full h-60 bg-slate-200 rounded-xl p-10 flex justify-center items-center  border-4 border-red-800 text-gray-400 animate-pulse"
                        >
                          Loading...
                        </div>
                      );
                    }
                  )}
                </div>
              )} */}
            </div>
            {/* </>
              )} */}
          </div>
        </>
      </div>
    </section>
  );
};
