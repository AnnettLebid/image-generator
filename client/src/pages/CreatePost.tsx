/* eslint-disable @typescript-eslint/no-unused-vars */
import { useState, FormEvent } from "react";
import { isRouteErrorResponse, useNavigate } from "react-router-dom";
import { useForm, FormProvider } from "react-hook-form";
import axios from "axios";

import { preview, sorry_smile } from "../assets";
import { getRandomPrompt } from "../utils";
import { FormField, Loader } from "../components";

interface formInterface {
  name: string;
  prompt: string;
  photo: string;
}

export const CreatePost = () => {
  const navigate = useNavigate();
  const methods = useForm();
  const {
    formState: { errors },
  } = methods;

  const [form, setForm] = useState<formInterface>({
    name: "",
    prompt: "",
    photo: "",
  });
  const [generatingInProgress, setGeneratingInProgress] =
    useState<boolean>(false);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState("");

  const handleShare = async (e: FormEvent) => {
    e.preventDefault();

    if (form.prompt && form.photo) {
      setLoading(true);
      try {
        await axios.post(
          "http://localhost:8080/api/v1/posts",
          { ...form },
          { headers: { "Content-Type": "application/json" } }
        );
        navigate("/");
      } catch (error) {
        console.log(error.message);
        setError(error.message);
      } finally {
        setLoading(false);
      }
    } else {
      alert("please enter a prompt and generate an image");
    }
  };

  // const handleSurpriseMe = () => {
  //   const randomPrompt = getRandomPrompt(form.prompt);
  //   setForm({ ...form, prompt: randomPrompt });
  // };

  const onSubmit = async (data: any) => {
    try {
      setGeneratingInProgress(true);
      const response = await axios.post(
        "http://localhost:8080/api/v1/dalle",
        { prompt: data.prompt },
        { headers: { "Content-Type": "application/json" } }
      );
      setForm({
        ...data,
        photo: `data:image/jpeg;base64,${response.data.photo}`,
      });
    } catch (error) {
      setError(error.response.data.error.message || error.message);
    } finally {
      setGeneratingInProgress(false);
    }
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">Create</h1>
        <p className="mt-2 text-[#666e75] text-[16px] max-w-[500px]">
          Create imaginative and visually stunning images generated by DALL-E AI
          using your own prompts
        </p>
      </div>
      <FormProvider {...methods}>
        <form
          className="mt-16 max-w-3xl"
          onSubmit={methods.handleSubmit(onSubmit)}
        >
          <div className="flex flex-col gap-5">
            <FormField
              labelName="Your name"
              type="text"
              name="name"
              placeholder="John Doe"
            />
            {errors.name && (
              <span className="text-red-500">
                {errors.prompt.message as string}
              </span>
            )}
            <FormField
              labelName="Prompt"
              type="text"
              name="prompt"
              placeholder="A rose cat by the window"
              isSurpriseMe
              // handleSurpriseMe={handleSurpriseMe}
            />
            <div>
              {errors.prompt && (
                <span className="text-red-500">
                  {errors.prompt.message as string}
                </span>
              )}
            </div>
            {error && (
              <div>
                <p className="text-red-500">{`Sorry, ${error}`}</p>
              </div>
            )}
            <div className="relative bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 w-64 p-3 h-64 flex justify-center items-center">
              {error ? (
                <img
                  src={sorry_smile}
                  alt={form.prompt}
                  className="w-full h-full object-contain opacity-40"
                />
              ) : form.photo ? (
                <img
                  src={form.photo}
                  alt={form.prompt}
                  className="w-full h-full object-contain"
                />
              ) : (
                <img
                  src={preview}
                  alt="preview"
                  className="w-9/12 h-9/12 object-contain opacity-40"
                />
              )}

              {generatingInProgress && (
                <div className="absolute inset-0 z-0 flex justify-center items-center bg-[rgba(0,0,0,0.5)] rounded-lg">
                  <Loader />
                </div>
              )}
            </div>
          </div>
          <div className="mt-5 flex gap-5">
            <button
              type="submit"
              // onClick={handleSubmit(onSubmit)}
              className="text-white bg-green-700 font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            >
              {generatingInProgress ? "Generating..." : "Generate"}
            </button>
          </div>
          <div className="mt-10">
            <p className="mt-2 text-[#666e75] text-[14px]">
              Once you have created the image you want, you can share it with
              others in the community
            </p>
            <button
              onClick={handleShare}
              className="mt-3 text-white bg-[#6469ff] font-medium rounded-md text-sm w-full sm:w-auto px-5 py-2.5 text-center focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            >
              {loading ? "Sharing..." : "Share with the community"}
            </button>
          </div>
        </form>
      </FormProvider>
    </section>
  );
};
